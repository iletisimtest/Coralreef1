///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CoralReefTest
{
    public partial class SatisSiparisi
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void clickToTableCellWithSearchValue(RepoItemInfo tableItemInfo, string kolonAdi, string aranacakDeger)
        {
        	Table table = tableItemInfo.CreateAdapter<Ranorex.Table>(true);
        	
        	IList<Row> rows = table.FindDescendants<Row>();
        	
        	
        	bool kayitBulundumu = false;
        	foreach (Row row in rows) {
        		
        		foreach (Cell cell in row.Cells) {
        			
        			try {
        				
        				if (cell != null && cell.Element.GetAttributeValue("accessiblename").ToString().Contains(kolonAdi)) {
        					//Kolon bulunduysa
        					
        					if (cell.Text != null && cell.Text.Equals(aranacakDeger)) {
        						// Hücre içerisindeki değer aradığım değere eşitse
        						
        						cell.Click();
        						kayitBulundumu = true;
        						break;
        						
        					}
        				}
        				
        			} catch (Exception e) {
        				
        			}	
        		}

        		if (kayitBulundumu) {
        			break;
        		}
        		
        	}
        	        	
        }

        public void writeToTableCell(RepoItemInfo tableItemInfo, string columnName, int rowIndex, string value) 
        {
            Table table = tableItemInfo.CreateAdapter<Ranorex.Table>(true);
        	
        	IList<Row> rows = table.FindDescendants<Row>();
        	
        	Row row = rows[rowIndex];
        	
        	foreach (Cell cell in row.Cells) {
        		if (cell.Element.GetAttributeValue("accessiblename").ToString().Contains(columnName)) {
        			
        			cell.Focus();
        			
        			cell.PressKeys("{ControlKey down}{AKey}{ControlKey up}");
        			cell.PressKeys("{BACK}");
        			cell.PressKeys(value);
        			

        		}
        		
        	}
        }

        public void clickToTableCell(RepoItemInfo tableItemInfo, string columnName, int rowIndex) 
        {
        	Table table = tableItemInfo.CreateAdapter<Ranorex.Table>(true);
        	
        	IList<Row> rows = table.FindDescendants<Row>();
        	
        	Row row = rows[rowIndex];
        	
        	foreach (Cell cell in row.Cells) {
        		
        		if (cell.Element.GetAttributeValue("accessiblename").ToString().Contains(columnName)) {
        			cell.Focus();
        			cell.Click();
        			
        			break;
        		}
        	}
        	
        	
        }

    }
}
